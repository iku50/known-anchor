// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"known-anchors/dal/db/model"
)

func newCard(db *gorm.DB, opts ...gen.DOOption) card {
	_card := card{}

	_card.cardDo.UseDB(db, opts...)
	_card.cardDo.UseModel(&model.Card{})

	tableName := _card.cardDo.TableName()
	_card.ALL = field.NewAsterisk(tableName)
	_card.ID = field.NewUint(tableName, "id")
	_card.CreatedAt = field.NewTime(tableName, "created_at")
	_card.UpdatedAt = field.NewTime(tableName, "updated_at")
	_card.DeletedAt = field.NewField(tableName, "deleted_at")
	_card.DeckID = field.NewUint(tableName, "deck_id")
	_card.UserID = field.NewUint(tableName, "user_id")
	_card.Front = field.NewString(tableName, "front")
	_card.Back = field.NewString(tableName, "back")
	_card.Status = field.NewString(tableName, "status")
	_card.LastReview = field.NewTime(tableName, "last_review")
	_card.NextReview = field.NewTime(tableName, "next_review")
	_card.Interval = field.NewInt(tableName, "interval")
	_card.Repetitions = field.NewInt(tableName, "repetitions")
	_card.Ease = field.NewFloat64(tableName, "ease")

	_card.fillFieldMap()

	return _card
}

type card struct {
	cardDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	DeckID      field.Uint
	UserID      field.Uint
	Front       field.String
	Back        field.String
	Status      field.String
	LastReview  field.Time
	NextReview  field.Time
	Interval    field.Int
	Repetitions field.Int
	Ease        field.Float64

	fieldMap map[string]field.Expr
}

func (c card) Table(newTableName string) *card {
	c.cardDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c card) As(alias string) *card {
	c.cardDo.DO = *(c.cardDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *card) updateTableName(table string) *card {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.DeckID = field.NewUint(table, "deck_id")
	c.UserID = field.NewUint(table, "user_id")
	c.Front = field.NewString(table, "front")
	c.Back = field.NewString(table, "back")
	c.Status = field.NewString(table, "status")
	c.LastReview = field.NewTime(table, "last_review")
	c.NextReview = field.NewTime(table, "next_review")
	c.Interval = field.NewInt(table, "interval")
	c.Repetitions = field.NewInt(table, "repetitions")
	c.Ease = field.NewFloat64(table, "ease")

	c.fillFieldMap()

	return c
}

func (c *card) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *card) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 14)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["deck_id"] = c.DeckID
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["front"] = c.Front
	c.fieldMap["back"] = c.Back
	c.fieldMap["status"] = c.Status
	c.fieldMap["last_review"] = c.LastReview
	c.fieldMap["next_review"] = c.NextReview
	c.fieldMap["interval"] = c.Interval
	c.fieldMap["repetitions"] = c.Repetitions
	c.fieldMap["ease"] = c.Ease
}

func (c card) clone(db *gorm.DB) card {
	c.cardDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c card) replaceDB(db *gorm.DB) card {
	c.cardDo.ReplaceDB(db)
	return c
}

type cardDo struct{ gen.DO }

type ICardDo interface {
	gen.SubQuery
	Debug() ICardDo
	WithContext(ctx context.Context) ICardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICardDo
	WriteDB() ICardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICardDo
	Not(conds ...gen.Condition) ICardDo
	Or(conds ...gen.Condition) ICardDo
	Select(conds ...field.Expr) ICardDo
	Where(conds ...gen.Condition) ICardDo
	Order(conds ...field.Expr) ICardDo
	Distinct(cols ...field.Expr) ICardDo
	Omit(cols ...field.Expr) ICardDo
	Join(table schema.Tabler, on ...field.Expr) ICardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICardDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICardDo
	Group(cols ...field.Expr) ICardDo
	Having(conds ...gen.Condition) ICardDo
	Limit(limit int) ICardDo
	Offset(offset int) ICardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICardDo
	Unscoped() ICardDo
	Create(values ...*model.Card) error
	CreateInBatches(values []*model.Card, batchSize int) error
	Save(values ...*model.Card) error
	First() (*model.Card, error)
	Take() (*model.Card, error)
	Last() (*model.Card, error)
	Find() ([]*model.Card, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Card, err error)
	FindInBatches(result *[]*model.Card, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Card) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICardDo
	Assign(attrs ...field.AssignExpr) ICardDo
	Joins(fields ...field.RelationField) ICardDo
	Preload(fields ...field.RelationField) ICardDo
	FirstOrInit() (*model.Card, error)
	FirstOrCreate() (*model.Card, error)
	FindByPage(offset int, limit int) (result []*model.Card, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FindByID(id uint) (result model.Card, err error)
}

// Where("id=@id")
func (c cardDo) FindByID(id uint) (result model.Card, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("id=? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Where(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c cardDo) Debug() ICardDo {
	return c.withDO(c.DO.Debug())
}

func (c cardDo) WithContext(ctx context.Context) ICardDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cardDo) ReadDB() ICardDo {
	return c.Clauses(dbresolver.Read)
}

func (c cardDo) WriteDB() ICardDo {
	return c.Clauses(dbresolver.Write)
}

func (c cardDo) Session(config *gorm.Session) ICardDo {
	return c.withDO(c.DO.Session(config))
}

func (c cardDo) Clauses(conds ...clause.Expression) ICardDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cardDo) Returning(value interface{}, columns ...string) ICardDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cardDo) Not(conds ...gen.Condition) ICardDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cardDo) Or(conds ...gen.Condition) ICardDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cardDo) Select(conds ...field.Expr) ICardDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cardDo) Where(conds ...gen.Condition) ICardDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cardDo) Order(conds ...field.Expr) ICardDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cardDo) Distinct(cols ...field.Expr) ICardDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cardDo) Omit(cols ...field.Expr) ICardDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cardDo) Join(table schema.Tabler, on ...field.Expr) ICardDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cardDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICardDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cardDo) RightJoin(table schema.Tabler, on ...field.Expr) ICardDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cardDo) Group(cols ...field.Expr) ICardDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cardDo) Having(conds ...gen.Condition) ICardDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cardDo) Limit(limit int) ICardDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cardDo) Offset(offset int) ICardDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICardDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cardDo) Unscoped() ICardDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cardDo) Create(values ...*model.Card) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cardDo) CreateInBatches(values []*model.Card, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cardDo) Save(values ...*model.Card) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cardDo) First() (*model.Card, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Card), nil
	}
}

func (c cardDo) Take() (*model.Card, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Card), nil
	}
}

func (c cardDo) Last() (*model.Card, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Card), nil
	}
}

func (c cardDo) Find() ([]*model.Card, error) {
	result, err := c.DO.Find()
	return result.([]*model.Card), err
}

func (c cardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Card, err error) {
	buf := make([]*model.Card, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cardDo) FindInBatches(result *[]*model.Card, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cardDo) Attrs(attrs ...field.AssignExpr) ICardDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cardDo) Assign(attrs ...field.AssignExpr) ICardDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cardDo) Joins(fields ...field.RelationField) ICardDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cardDo) Preload(fields ...field.RelationField) ICardDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cardDo) FirstOrInit() (*model.Card, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Card), nil
	}
}

func (c cardDo) FirstOrCreate() (*model.Card, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Card), nil
	}
}

func (c cardDo) FindByPage(offset int, limit int) (result []*model.Card, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cardDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cardDo) Delete(models ...*model.Card) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cardDo) withDO(do gen.Dao) *cardDo {
	c.DO = *do.(*gen.DO)
	return c
}
