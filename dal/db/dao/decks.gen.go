// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"known-anchors/dal/db/model"
)

func newDeck(db *gorm.DB, opts ...gen.DOOption) deck {
	_deck := deck{}

	_deck.deckDo.UseDB(db, opts...)
	_deck.deckDo.UseModel(&model.Deck{})

	tableName := _deck.deckDo.TableName()
	_deck.ALL = field.NewAsterisk(tableName)
	_deck.ID = field.NewUint(tableName, "id")
	_deck.CreatedAt = field.NewTime(tableName, "created_at")
	_deck.UpdatedAt = field.NewTime(tableName, "updated_at")
	_deck.DeletedAt = field.NewField(tableName, "deleted_at")
	_deck.UserID = field.NewUint(tableName, "user_id")
	_deck.Name = field.NewString(tableName, "name")
	_deck.Tags = field.NewString(tableName, "tags")
	_deck.Ispub = field.NewBool(tableName, "ispub")

	_deck.fillFieldMap()

	return _deck
}

type deck struct {
	deckDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	UserID    field.Uint
	Name      field.String
	Tags      field.String
	Ispub     field.Bool

	fieldMap map[string]field.Expr
}

func (d deck) Table(newTableName string) *deck {
	d.deckDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deck) As(alias string) *deck {
	d.deckDo.DO = *(d.deckDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deck) updateTableName(table string) *deck {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewUint(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.UserID = field.NewUint(table, "user_id")
	d.Name = field.NewString(table, "name")
	d.Tags = field.NewString(table, "tags")
	d.Ispub = field.NewBool(table, "ispub")

	d.fillFieldMap()

	return d
}

func (d *deck) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deck) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 8)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["user_id"] = d.UserID
	d.fieldMap["name"] = d.Name
	d.fieldMap["tags"] = d.Tags
	d.fieldMap["ispub"] = d.Ispub
}

func (d deck) clone(db *gorm.DB) deck {
	d.deckDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deck) replaceDB(db *gorm.DB) deck {
	d.deckDo.ReplaceDB(db)
	return d
}

type deckDo struct{ gen.DO }

type IDeckDo interface {
	gen.SubQuery
	Debug() IDeckDo
	WithContext(ctx context.Context) IDeckDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeckDo
	WriteDB() IDeckDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeckDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeckDo
	Not(conds ...gen.Condition) IDeckDo
	Or(conds ...gen.Condition) IDeckDo
	Select(conds ...field.Expr) IDeckDo
	Where(conds ...gen.Condition) IDeckDo
	Order(conds ...field.Expr) IDeckDo
	Distinct(cols ...field.Expr) IDeckDo
	Omit(cols ...field.Expr) IDeckDo
	Join(table schema.Tabler, on ...field.Expr) IDeckDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeckDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeckDo
	Group(cols ...field.Expr) IDeckDo
	Having(conds ...gen.Condition) IDeckDo
	Limit(limit int) IDeckDo
	Offset(offset int) IDeckDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeckDo
	Unscoped() IDeckDo
	Create(values ...*model.Deck) error
	CreateInBatches(values []*model.Deck, batchSize int) error
	Save(values ...*model.Deck) error
	First() (*model.Deck, error)
	Take() (*model.Deck, error)
	Last() (*model.Deck, error)
	Find() ([]*model.Deck, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Deck, err error)
	FindInBatches(result *[]*model.Deck, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Deck) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeckDo
	Assign(attrs ...field.AssignExpr) IDeckDo
	Joins(fields ...field.RelationField) IDeckDo
	Preload(fields ...field.RelationField) IDeckDo
	FirstOrInit() (*model.Deck, error)
	FirstOrCreate() (*model.Deck, error)
	FindByPage(offset int, limit int) (result []*model.Deck, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeckDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FindByID(id uint) (result model.Deck, err error)
	ListByUserID(user_id uint, limit int, offset int) (result []model.Deck, err error)
	CountByUserID(user_id uint) (result int64, err error)
}

// Where("id=@id")
func (d deckDo) FindByID(id uint) (result model.Deck, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("id=? ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Where(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// select * from decks where user_id=@user_id limit @limit offset @offset
func (d deckDo) ListByUserID(user_id uint, limit int, offset int) (result []model.Deck, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, user_id)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("select * from decks where user_id=? limit ? offset ? ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// select count(*) from decks where user_id=@user_id
func (d deckDo) CountByUserID(user_id uint) (result int64, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, user_id)
	generateSQL.WriteString("select count(*) from decks where user_id=? ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (d deckDo) Debug() IDeckDo {
	return d.withDO(d.DO.Debug())
}

func (d deckDo) WithContext(ctx context.Context) IDeckDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deckDo) ReadDB() IDeckDo {
	return d.Clauses(dbresolver.Read)
}

func (d deckDo) WriteDB() IDeckDo {
	return d.Clauses(dbresolver.Write)
}

func (d deckDo) Session(config *gorm.Session) IDeckDo {
	return d.withDO(d.DO.Session(config))
}

func (d deckDo) Clauses(conds ...clause.Expression) IDeckDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deckDo) Returning(value interface{}, columns ...string) IDeckDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deckDo) Not(conds ...gen.Condition) IDeckDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deckDo) Or(conds ...gen.Condition) IDeckDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deckDo) Select(conds ...field.Expr) IDeckDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deckDo) Where(conds ...gen.Condition) IDeckDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deckDo) Order(conds ...field.Expr) IDeckDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deckDo) Distinct(cols ...field.Expr) IDeckDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deckDo) Omit(cols ...field.Expr) IDeckDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deckDo) Join(table schema.Tabler, on ...field.Expr) IDeckDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deckDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeckDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deckDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeckDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deckDo) Group(cols ...field.Expr) IDeckDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deckDo) Having(conds ...gen.Condition) IDeckDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deckDo) Limit(limit int) IDeckDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deckDo) Offset(offset int) IDeckDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deckDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeckDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deckDo) Unscoped() IDeckDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deckDo) Create(values ...*model.Deck) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deckDo) CreateInBatches(values []*model.Deck, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deckDo) Save(values ...*model.Deck) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deckDo) First() (*model.Deck, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Deck), nil
	}
}

func (d deckDo) Take() (*model.Deck, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Deck), nil
	}
}

func (d deckDo) Last() (*model.Deck, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Deck), nil
	}
}

func (d deckDo) Find() ([]*model.Deck, error) {
	result, err := d.DO.Find()
	return result.([]*model.Deck), err
}

func (d deckDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Deck, err error) {
	buf := make([]*model.Deck, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deckDo) FindInBatches(result *[]*model.Deck, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deckDo) Attrs(attrs ...field.AssignExpr) IDeckDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deckDo) Assign(attrs ...field.AssignExpr) IDeckDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deckDo) Joins(fields ...field.RelationField) IDeckDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deckDo) Preload(fields ...field.RelationField) IDeckDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deckDo) FirstOrInit() (*model.Deck, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Deck), nil
	}
}

func (d deckDo) FirstOrCreate() (*model.Deck, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Deck), nil
	}
}

func (d deckDo) FindByPage(offset int, limit int) (result []*model.Deck, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deckDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deckDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deckDo) Delete(models ...*model.Deck) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deckDo) withDO(do gen.Dao) *deckDo {
	d.DO = *do.(*gen.DO)
	return d
}
